this is kinda like an issues list for the branch:

* 1) change the artifact ids. they can't have dashes in.
    genxdm-api -> api
    genxdm-xpath-api -> xpath.v10
    bridgekit -> no change
    bridgetest -> no change
    bridge-xyzzy -> bridge.xyzzy
    iotest -> processor.io.tests
    proc-convert -> processor.convert
    proc-io -> processor.io
    proc-w3cxs -> processor.w3c.xs
    proc-w3cxs-val -> processor.w3c.xs.validation
    proc-xpath -> processor.xpath.v10
    valtest -> processor.w3c.xs.validationtest
    xpathtest -> processor.xpath.v10.tests
    * DONE: using the patterns shown above.
* 2) figure out how to make the generated jar files use the
   groupId.artifactId-version pattern.
   * DONE: use <finalName>${groupId}.${artifactId}-${version}</finalName>
           in the root POM (in <build />).
   * OOOPS! fixed from '-' to '_' ... sort of. maven switches it back when
            it puts it in the m2 repo. interesting.
3) based on some of the weird names shown above, consider renaming packages
   for consistency, and then making the artifactIds match.
4) update versions (pretty seriously)
   * QUERY: really? with ids changing (except bridgekit bridgetest) and
            all jars changed, is this really necessary?
5) fix the OSGi wiki page, and make it link (to other wiki pages)
6) add to PREREQUISITES in this directory
7) QUERY: we *could* create an 'eclipse' directory, and in that, create
   features for core (incl api, bridgekit, convert, io), xpath 1 (incl
   xpath api and processor), schema (w3c.xs and w3c.xs.validation), tests
   (bridgetest, iotest, valtest, xpathtest), and each of the three bridge
   bundles (axiom, cx, dom) in separate features. Eclipse features are a
   jar file containing at minimum the feature.xml (optionally other things
   referenced by the feature.xml, like feature.properties and license files).
   But should we? They'd have to be manually maintained (not that difficult,
   but somewhat tedious and quite error-prone).